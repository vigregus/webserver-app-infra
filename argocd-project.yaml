apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  name: webserver-app
  namespace: argocd
  labels:
    app.kubernetes.io/name: webserver-app-project
    app.kubernetes.io/part-of: webserver-app
spec:
  description: "Project for webserver-app deployment"

  # Source repositories
  sourceRepos:
    - https://github.com/vigregus/webserver-app-infra.git

  # Destination clusters and namespaces
  destinations:
    - namespace: 'default'
      server: https://kubernetes.default.svc
    - namespace: 'development'
      server: https://kubernetes.default.svc
    - namespace: 'production'
      server: https://kubernetes.default.svc
    - namespace: 'staging'
      server: https://kubernetes.default.svc

  # Cluster resources
  clusterResourceWhitelist:
    - group: ''
      kind: Namespace
    - group: 'apps'
      kind: Deployment
    - group: 'apps'
      kind: ReplicaSet
    - group: 'apps'
      kind: StatefulSet
    - group: 'apps'
      kind: DaemonSet
    - group: ''
      kind: Service
    - group: ''
      kind: ConfigMap
    - group: ''
      kind: Secret
    - group: ''
      kind: PersistentVolumeClaim
    - group: 'networking.k8s.io'
      kind: Ingress
    - group: 'networking.k8s.io'
      kind: NetworkPolicy
    - group: 'autoscaling'
      kind: HorizontalPodAutoscaler
    - group: 'policy'
      kind: PodDisruptionBudget
    - group: 'rbac.authorization.k8s.io'
      kind: ServiceAccount
    - group: 'rbac.authorization.k8s.io'
      kind: Role
    - group: 'rbac.authorization.k8s.io'
      kind: RoleBinding
    - group: 'rbac.authorization.k8s.io'
      kind: ClusterRole
    - group: 'rbac.authorization.k8s.io'
      kind: ClusterRoleBinding

  # Namespace resources
  namespaceResourceWhitelist:
    - group: ''
      kind: ConfigMap
    - group: ''
      kind: Secret
    - group: ''
      kind: Service
    - group: ''
      kind: PersistentVolumeClaim
    - group: 'apps'
      kind: Deployment
    - group: 'apps'
      kind: ReplicaSet
    - group: 'apps'
      kind: StatefulSet
    - group: 'networking.k8s.io'
      kind: Ingress
    - group: 'autoscaling'
      kind: HorizontalPodAutoscaler
    - group: 'policy'
      kind: PodDisruptionBudget

  # Sync policy
  syncWindows:
    - kind: allow
      schedule: '0 0 * * *'
      duration: 1h
      applications:
        - webserver-app-prod
    - kind: deny
      schedule: '0 18 * * 5'
      duration: 72h
      applications:
        - webserver-app-prod

  # Roles
  roles:
    - name: webserver-app-admin
      description: "Full access to webserver-app project"
      policies:
        - p, proj:webserver-app:webserver-app-admin, applications, *, webserver-app/*, allow
        - p, proj:webserver-app:webserver-app-admin, repositories, *, *, allow
        - p, proj:webserver-app:webserver-app-admin, certificates, *, *, allow
        - p, proj:webserver-app:webserver-app-admin, clusters, *, *, allow
        - p, proj:webserver-app:webserver-app-admin, gpgkeys, *, *, allow
        - p, proj:webserver-app:webserver-app-admin, logs, get, webserver-app/*, allow
        - p, proj:webserver-app:webserver-app-admin, exec, create, webserver-app/*, allow
        - p, proj:webserver-app:webserver-app-admin, applications, get, webserver-app/*, allow
        - p, proj:webserver-app:webserver-app-admin, applications, sync, webserver-app/*, allow
        - p, proj:webserver-app:webserver-app-admin, applications, action/*, webserver-app/*, allow
      groups:
        - webserver-app-admins

    - name: webserver-app-readonly
      description: "Read-only access to webserver-app project"
      policies:
        - p, proj:webserver-app:webserver-app-readonly, applications, get, webserver-app/*, allow
        - p, proj:webserver-app:webserver-app-readonly, logs, get, webserver-app/*, allow
      groups:
        - webserver-app-readers
